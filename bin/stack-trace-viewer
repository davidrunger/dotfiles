#!/usr/bin/env ruby
# frozen_string_literal: true

# Prints the surrounding code for each line of code in a Ruby stack trace.
#
# Example (after copying the stack trace into the clipboard):
#     pst | stack-trace-viewer
#
# Example (after saving the stack trace in a file):
#     stack-trace-viewer personal/random.txt
#
# rubocop:disable Layout/LineLength
# Stack traces should have a format like this:
#     /home/david/.rbenv/versions/3.4.1/lib/ruby/gems/3.4.0/gems/rspec-mocks-3.13.2/lib/rspec/mocks/message_expectation.rb:762:in 'block in RSpec::Mocks::Implementation#call'
#     /home/david/code/david_runger/config/initializers/error_subscriber.rb:35:in 'Kernel#public_send'
#     <internal:kernel>:168:in 'Kernel#loop'
#     bin/rspec:17:in 'Kernel#load'
# rubocop:enable Layout/LineLength

require 'command_kit'

require_relative "#{Dir.home}/code/dotfiles/utils/ruby/memoization.rb"

class StackTraceViewer < CommandKit::Command
  prepend Memoization

  usage '[OPTIONS] [FILE]'

  option(
    :context,
    short: '-C',
    desc: 'Number of surrounding context lines to print.',
    value: {
      type: Integer,
      default: 8,
    },
  )

  option(
    :exclude,
    short: '-e',
    desc: 'Comma-separated list of string(s) in stack traces not to print.',
    value: {
      type: Array,
      default: [],
    },
  )

  argument(
    :file,
    required: false,
    desc: 'File containing stack trace.',
  )

  def run(file)
    @file = file

    stack_trace_lines.reverse.each_with_index do |line, index|
      next if line.strip.empty?

      print_context_for_line(line, stack_trace_lines.size - index)
    end
  end

  private

  memoize \
  def stack_trace_lines
    stack_trace = @file ? File.read(@file) : STDIN.read

    stack_trace.lines
  end

  memoize \
  def context_size
    options[:context]
  end

  memoize \
  def excluded_strings
    options[:exclude]
  end

  # rubocop:disable Metrics/MethodLength
  def print_context_for_line(line, stack_trace_order_number)
    if line.include?('<internal:')
      puts(
        "\nLine #{stack_trace_order_number}: Warning: " \
        "Cannot show context for internal Ruby method: #{line.strip}.",
      )
      return
    end

    if (matching_exclude_string = excluded_strings.detect { line.include?(it) })
      puts(
        "\nLine #{stack_trace_order_number}: Info: " \
      "Skipping line because it includes '#{matching_exclude_string}'.",
      )
      return
    end

    match = line.match(/^[\s#]*(\S+):(\d+):in/)

    if !match
      return
    end

    file_path = match[1]
    line_number = Integer(match[2])

    unless File.exist?(file_path)
      puts "\nLine #{stack_trace_order_number}: Warning: File not found: #{file_path}"
      return
    end

    # Calculate context range
    start_line = [line_number - context_size, 1].max
    end_line = line_number + context_size

    # Use bat to display the file.
    puts "\nLine #{stack_trace_order_number}: #{file_path}:#{line_number}:"
    system(
      'bat',
      '--style=numbers,grid',
      '--highlight-line',
      line_number.to_s,
      '--line-range',
      "#{start_line}:#{end_line}",
      file_path,
    )
  end
  # rubocop:enable Metrics/MethodLength
end

StackTraceViewer.start
