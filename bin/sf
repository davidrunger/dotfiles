#!/usr/bin/env ruby
# frozen_string_literal: true

# Finds test/[s]pec [f]iles often changed in the same commit as an input file.
#
# Prints the total number of lines changed in each file that was
# changed in any of the same commits as the input file.
#
# Example:
#   $ sf app/javascript/apps/ActivityBuilder/ActivityBuilder.tsx
#
# Written largely by ChatGPT.

load("#{Dir.home}/code/dotfiles/utils/ruby/command_line_program.rb")

sloptions =
  Slop.parse do |o|
    o.bool('-D', '--exclude-deleted', 'exclude deleted files', default: false)
    o.integer('-t', '--top', 'number of files to show', default: 40)
    o.string('-f', '--filter', 'a string that spec paths must include')
    o.string('-e', '--exclude', 'a string that spec paths must not include')
    o.on('-h', '--help', 'view this help info') do
      Sf.print_options(o)
      exit
    end
  end

class SpecFileFinder < CommandLineProgram
  alias file_paths arguments

  def call
    validate_arguments!

    changed_files_aggregated_by_renames.
      sort_by { |_path, file_contributions| -file_contributions.values.sum }.
      first(@options[:top]).
      each do |path, file_contributions|
        puts([
          file_contributions.values.sum,
          colorized_path(path),
          renamed_file_contributions_string(path, file_contributions),
        ].join(' ').squish)
      end
  end

  private

  def validate_arguments!
    if file_paths.blank?
      puts('Provide at least one argument.'.red)
      exit(1)
    end
  end

  memoize \
  def changed_files_aggregated_by_renames
    line_change_data_by_final_paths = Hash.new { |hash, key| hash[key] = {} }

    lines_changed_by_spec_file.each do |path, lines_changed|
      final_path = final_renamed_path(path)
      line_change_data_by_final_paths[final_path].merge!(
        path => lines_changed,
      )
    end

    if @options.exclude_deleted?
      line_change_data_by_final_paths.filter! do |path, _lines_changed|
        File.exist?(path)
      end
    end

    line_change_data_by_final_paths
  end

  def colorized_path(path)
    if File.exist?(path)
      path.cyan
    else
      path.magenta
    end
  end

  def renamed_file_contributions_string(path, renamed_file_contributions)
    if renamed_file_contributions.size <= 1
      return ''
    end

    comma_separated_contributions =
      renamed_file_contributions.
        sort_by do |contributing_path, _lines_changed|
          if contributing_path == path
            0
          else
            1
          end
        end.
        map do |contributing_path, lines_changed|
          path_name =
            if contributing_path == path
              'self'
            else
              contributing_path
            end

          "#{path_name}: #{lines_changed}"
        end.join(', ')

    "(#{comma_separated_contributions})".white
  end

  memoize \
  def renames
    `git log HEAD --format=%H --name-status --follow --diff-filter=R -- .`.
      split("\n").
      filter_map do |line|
        if (match = line.match(/^R\d{3}\s+(?<old_name>\S+)\s+(?<new_name>\S+)/))
          match.
            named_captures.
            values_at('old_name', 'new_name')
        end
      end.
      to_h
  end

  memoize \
  def final_renamed_path(path)
    if (rename = renames[path])
      final_renamed_path(rename)
    else
      path
    end
  end

  def lines_changed_by_spec_file
    ignore_revs =
      ignore_revs_from_file('.git-blame-ignore-revs') +
      ignore_revs_from_file('personal/.git-blame-ignore-revs')

    line_changes = Hash.new(0)

    commits = []
    file_paths.each do |file_path|
      commits.concat(`git log --follow --format=%H -- #{file_path}`.strip.split("\n"))
    end
    commits.uniq!

    commits.each do |commit|
      next if ignore_revs.include?(commit)

      files_changed = `git diff-tree --no-commit-id --name-only -r #{commit}`.strip.split("\n")

      files_changed.each do |file_changed|
        next if file_paths.include?(file_changed)

        if matching_test_file?(file_changed)
          line_changes[file_changed] += line_change_count(commit, file_changed)
        end
      end
    end

    line_changes
  end

  def matching_test_file?(file)
    (
      file.match?(%r{\.test\.tsx?\z}) ||
        file.match?(%r{\Aspec/(?!(cassettes|factories|fixtures|support)/)})
    ) &&
      (filter.blank? || file.include?(filter)) &&
      (exclude.blank? || !file.include?(exclude))
  end

  def ignore_revs_from_file(ignore_revs_file)
    ignore_revs = []

    if File.exist?(ignore_revs_file)
      File.open(ignore_revs_file, 'r') do |file|
        file.each_line do |line|
          line.strip!
          ignore_revs << line unless line.empty? || line.start_with?('#')
        end
      end
    end

    ignore_revs
  end

  def line_change_count(commit, file_path)
    output = `git show --shortstat #{commit} -- #{file_path}`.strip
    line_changes = output.scan(/(\d+) (?:insertions?|deletions?)/).flatten.map { Integer(_1) }
    line_changes.sum
  end
end

module Sf
  def self.print_options(options)
    puts(options.to_s.dup.sub(%r{#{Dir.home}/code/dotfiles/bin/}, ''))
  end
end

SpecFileFinder.new(sloptions:).call
