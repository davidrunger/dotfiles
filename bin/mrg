#!/usr/bin/env ruby
# frozen_string_literal: true

# [m]ulti-phase [r]ip[g]rep
#
# Examples:
#   Search for "def self" in files that contain "slop":
#     mrg slop 'def self'
#
#   Search for "options" in files that contain "require 'slop'",
#   except for files starting with "utils/":
#     mrg "require 'slop'" options -e utils/

# load("#{Dir.home}/code/dotfiles/utils/ruby/debug.rb")

require_relative "#{Dir.home}/code/dotfiles/utils/ruby/command_line_program.rb"
require_relative "#{Dir.home}/code/dotfiles/utils/ruby/string_patches.rb"

sloptions =
  Slop.parse do |o|
    o.array('-e', '--exclude', 'file pattern(s) to exclude')
    o.on('-h', '--help', 'view this help info') do
      puts(o.to_s.dup.sub(%r{#{Dir.home}/code/dotfiles/bin/}, ''))
      exit
    end
  end

class MultiLevelRipgrep < CommandLineProgram
  def call
    *@initial_filters, @final_search = arguments

    line_matches =
      `#{command}`.split("\n").map do |line|
        line.
          match(/(?<prefix>\A\e\[0m\e\[35m\S+:\e\[0m\e\[32m\d+\e\[0m:)(?<remainder>.*\z)/).
          named_captures.symbolize_keys
      end.map do |line_match|
        path, line_number = line_match[:prefix].split(':').map { it.split(':').first }
        path_segments = path.split('/')
        line_match.merge(
          path_segments:,
          line_number:,
        )
      end

    current_path_segments = nil

    line_matches.
      sort_by do |line_match|
        line_match[:path_segments] + [Integer(line_match[:line_number].uncolor)]
      end.each do |line_match|
        next_path_segments = line_match[:path_segments]
        if current_path_segments != next_path_segments
          if !current_path_segments.nil?
            puts
          end

          puts(
            "-- #{next_path_segments.join('/').uncolor.cyan} ".
              ljust(100, '-').
              gsub('-', '-'.cyan),
          )
        end
        current_path_segments = next_path_segments

        prefix, remainder = line_match.values_at(:prefix, :remainder)
        puts(prefix)
        puts(remainder)
      end
  end

  private

  def command
    'rg -n -H --no-heading --color=always ' \
      "'#{@final_search}' #{subshell_for_files_matching_initial_filters}"
  end

  memoize \
  def subshell_for_files_matching_initial_filters
    file_filter_command = ''

    @initial_filters.each do |initial_filter|
      file_filter_command =
        "$(rg '#{initial_filter}' -l #{file_filter_command})".
          sub(/ \)\z/, " | rg -v ' ' | rg -v ^public/)")
    end

    if (exclude = options[:exclude]).present?
      file_filter_command.gsub!(/\)\z/, "| rg -v '#{exclude.join('|')}')")
    end

    file_filter_command
  end
end

MultiLevelRipgrep.new(sloptions:).call
