#!/usr/bin/env ruby
# frozen_string_literal: true

# Automatically merge as many dependabot-authored PRs in davidrunger repos as
# possible. (This is better than auto-merging PRs immediately if/when they pass
# all checks, because, by launching this script manually, I can ensure that PRs
# are only merged and deployed when I am aware that they are being merged and
# when I am hopefully somewhat available to deal with any resulting issues that
# might arise as a result of deployment, etc.)

require 'bundler/setup'
require 'dotenv/load'
require 'octokit'
require 'command_kit'
require 'active_support'
require 'active_support/all'
require_relative "#{Dir.home}/code/dotfiles/utils/ruby/monkeypatch_string_color.rb"
require_relative "#{Dir.home}/code/dotfiles/utils/ruby/runger_config.rb"
require_relative "#{Dir.home}/code/dotfiles/utils/ruby/memoization.rb"

# rubocop:disable Naming/MethodParameterName
# ^ We want to name some parameters `pr`.

module Helpers
  prepend Memoization

  private

  def log_verbose(message)
    puts(message) if verbose?
  end

  memoize \
  def verbose?
    !!@verbose
  end

  def repo_hash
    { repo: @repo, user: 'davidrunger' }
  end
end

class GithubPrAutoMerger < CommandKit::Command
  include Helpers
  prepend Memoization

  option(
    :verbose,
    short: '-v',
    desc: 'Enable verbose logging of GitHub API calls',
  ) do
    @verbose = true
  end

  def run
    Signal.trap('SIGINT') { exit_gracefully }

    github_client # make sure client can be initialized without error

    repos.each do |repo|
      merge_dependabot_prs(repo)
    rescue StandardError => e
      puts("Error processing repo #{repo}: #{e.message}".red)
    end
  end

  private

  memoize \
  def repos
    RungerConfig.new("#{Dir.home}/code/dotfiles").
      get('auto-merge-repos').
      split("\n")
  end

  memoize \
  def github_client
    access_token =
      ENV.fetch('GITHUB_ACCESS_TOKEN') do
        raise('GITHUB_ACCESS_TOKEN environment variable is not set.')
      end

    Octokit::Client.new(access_token:, auto_paginate: true).tap do |client|
      client.user.login # Test authentication
    end
  rescue Octokit::Unauthorized
    raise('Invalid GitHub access token.')
  end

  def merge_dependabot_prs(repo)
    PullRequestMerger.new(repo, github_client, verbose?).merge_dependabot_prs
  end

  def exit_gracefully
    puts("\nInterrupted. Exiting gracefully...".yellow)
    exit(0)
  end

  # Internal class to handle pull request processing
  class PullRequestMerger
    include Helpers
    prepend Memoization

    def initialize(repo, client, verbose)
      @repo = repo
      @client = client
      @verbose = verbose
    end

    def merge_dependabot_prs
      dependabot_prs&.each_with_index do |pr, index|
        merge_if_ready(pr)

        unless index == dependabot_prs.size - 1
          # Wait between PRs in the same repo to give dependabot time to start rebasing, if needed.
          sleep(10)
        end
      rescue => error
        log_pr_merge_error(pr, error)
      end
    end

    memoize \
    def dependabot_prs
      log_verbose("Fetching PRs for #{@repo}")

      @client.pull_requests(repo_hash, author: 'dependabot', state: 'open').tap do
        log_verbose("Done fetching PRs for #{@repo}".cyan)
      end
    end

    def merge_if_ready(pr)
      if dependabot_rebasing?(pr)
        log_verbose("Dependabot is rebasing PR ##{pr.number} in #{@repo}. Skipping.".yellow)
      elsif checks_completed_successfully?(pr) && merge_pr(pr)
        log_merged_pr(pr)
      end
    end

    def log_pr_merge_error(pr, error)
      error_message = "Failed to merge PR ##{pr.number} in #{@repo}: #{error.message}"
      puts(error_message.red)
    end

    private

    def dependabot_rebasing?(pr)
      # Refresh PR to get latest body.
      pr = @client.pull_request(repo_hash, pr.number)

      pr.body&.include?('Dependabot is rebasing this PR')
    end

    def checks_completed_successfully?(pr)
      GitHubActionChecker.new(@repo, @client, pr).checks_completed_successfully?
    end

    def merge_pr(pr)
      log_verbose("Merging PR ##{pr.number} in #{@repo}")

      @client.merge_pull_request(
        repo_hash,
        pr.number,
        '', # commit message body
        merge_method: 'squash',
      )

      true
    rescue Octokit::MethodNotAllowed => error
      puts(error.inspect.red)

      false
    end

    def log_merged_pr(pr)
      puts("Merged PR ##{pr.number} in #{@repo} - #{pr.title}".green)
    end
  end

  # Internal class to check GitHub Actions status
  class GitHubActionChecker
    include Helpers

    MAX_WAIT_TIME = 600 # 10 minutes

    def initialize(repo, client, pr)
      @repo = repo
      @client = client
      @pr = pr
      @start_time = Time.now
    end

    def checks_completed_successfully?
      loop do
        statuses = latest_statuses
        conclusions = latest_conclusions

        unskipped_statuses_and_conclusions =
          (statuses + conclusions).compact.reject { _1.in?(%w[skipped]) }

        # There are no actions yet.
        if unskipped_statuses_and_conclusions.empty?
          puts("No GitHub Actions found for PR ##{@pr.number} in #{@repo}".yellow)
          return false
        end

        # Check action states.
        if unskipped_statuses_and_conclusions.all?('success')
          return true
        elsif unskipped_statuses_and_conclusions.include?('failure')
          puts("Failing GitHub Actions for PR ##{@pr.number} in #{@repo}".red)
          return false
        end

        # Action(s) are in progress. Wait.
        sleep(10)
        break if Time.now - @start_time > MAX_WAIT_TIME
      end

      false
    end

    private

    def latest_statuses
      @client.combined_status(repo_hash, @pr.head.sha).statuses.map(&:state)
    end

    def latest_conclusions
      @client.check_runs_for_ref(repo_hash, @pr.head.sha).check_runs.map(&:conclusion)
    end
  end
end

# rubocop:enable Naming/MethodParameterName

GithubPrAutoMerger.start
