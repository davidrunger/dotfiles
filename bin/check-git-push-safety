#!/usr/bin/env bash

# Make sure that we're on a branch that's okay to push and that there isn't any debugging code.

set -euo pipefail # exit on any error, don't allow undefined variables, pipes don't swallow errors

exit_with_error_unless_checks_not_required() {
  if [[ "${PUSH_CHECKS_REQUIRED:-true}" != "false" ]] ; then
    exit 1
  fi
}

if ! verify-on-ok-branch ; then
  exit_with_error_unless_checks_not_required
fi

if my-repo ; then
  if [ "$(git config core.hooksPath)" != "bin/githooks" ] ; then
    red "\`git config core.hooksPath\` is not set to \`bin/githooks\`."
    blue "Run \`git config core.hooksPath bin/githooks\` to correct."
    exit_with_error_unless_checks_not_required
  fi

  if ! [ -f 'bin/githooks/pre-push' ] ; then
    red "\`bin/githooks/pre-push\` does not exist (as a file)."
    blue "Run \`tsc bin/githooks/pre-push\` to correct."
    exit_with_error_unless_checks_not_required
  fi
fi

files_to_check_for_debugging=$(changed-not-deleted-files | rg -v '^Gemfile(\.lock)?$')

if [[ "$files_to_check_for_debugging" != "" ]] ; then
  # don't push if there's still debugging code
  debugging_code_regex_parts=(
    '^((\s*|RSpec\.)(fit|fdescribe|fcontext|fscenario|fspecify))|'
    '(^\s*[^#]*|["'"'"'].*)\b(open_page|save_and_open_page)\b|'
    '\b(binding\.pry|byebug)\b|'
    '\btapp\b'
  )
  readarray -t files_to_search <<< "$files_to_check_for_debugging"
  if rg -g '!public/' -g '*.rake' -g '*.rb' -g '*.js' -g '*.coffee' -g '*.haml' -g '*.html' -g '*.erb' \
      "$(printf %s "${debugging_code_regex_parts[@]}")" "${files_to_search[@]}" ; then
    echo
    echo "Easy there, cowboy! Cleanup yo code, first."
    exit_with_error_unless_checks_not_required
  fi
fi

# don't push if there are still `!!!` markers in the code
if git diff --diff-filter=dr "origin/$(main-branch)..."  | \
    grep '^\+' | rg --quiet --fixed-strings '!!!' ; then
  echo "Easy there, cowboy! You still have some markers in your code."
  git diff --diff-filter=dr --name-status "origin/$(main-branch)..." | cut -f2 | xargs rg --with-filename --fixed-strings '!!!'
  exit_with_error_unless_checks_not_required
fi

# don't push if there are still `!!!` markers in the code (renamed files)
if git diff --diff-filter=R "origin/$(main-branch)"...  | \
    grep '^\+' | rg --quiet --fixed-strings '!!!' ; then
  echo "Easy there, cowboy! You still have some markers in your code in renamed files."
  git diff --diff-filter=R --name-status "origin/$(main-branch)..." | cut -f3 | xargs rg --with-filename --fixed-strings '!!!'
  exit_with_error_unless_checks_not_required
fi

# don't push if there are still `!!!` markers in .env* files
for file in .env .env.development.local .env.test.local ; do
  if [ -f $file ]
  then
    if rg --quiet --fixed-strings '!!!' $file ; then
      rg --with-filename --fixed-strings '!!!' $file
      echo "Easy there, cowboy! You still have some markers in $file ."
      exit_with_error_unless_checks_not_required
    fi
  fi
done

# Don't push if there are any TEMP or Z commits.
if git log --oneline "$(main-branch).." | rg --quiet 'TEMP|Z' ; then
  echo "Woah! You still have a temp commit."
  exit_with_error_unless_checks_not_required
fi

# if all of the above checks passed, we're good to push! :)
exit 0
