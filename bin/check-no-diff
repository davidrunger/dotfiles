#!/usr/bin/env bash

# Exits with 0 (success) if there is no diff between the current branch and the main branch.
# (Used in `gdm`, not standalone.)

set -euo pipefail # exit on any error, don't allow undefined variables, pipes don't swallow errors

branch=$1

changed_files=$(git diff --name-only "origin/$(main-branch)...$branch")
for changed_file in $changed_files; do
  # If file exists in main branch...
  if git cat-file -e "origin/$(main-branch):$changed_file" &> /dev/null
  then
    # ... but not in current branch ...
    if ! git cat-file -e "$branch:$changed_file" &> /dev/null
    then
      # ... then branches are not the same.
      exit 1
    fi
  else # If file does not exist in main branch ...
    # ... but does exist in current branch ...
    if git cat-file -e "$branch:$changed_file" &> /dev/null
    then
      # ... then branch differs from master.
      exit 1
    fi
  fi
done

readarray -t changed_files_still_in_main < <(git diff --name-only --diff-filter=d "origin/$(main-branch)...$branch")
changed_lines=$(
  git diff --diff-filter=d "origin/$(main-branch)..$branch" "${changed_files_still_in_main[@]}" | \
  wc -l | \
  tr -d '[:space:]'
)

if [ "$changed_lines" == "0" ]
then
  # If there are 0 changed lines, then there is no diff.
  exit 0
else
  # If there are some changed lines, then the branches are different.
  exit 1
fi
