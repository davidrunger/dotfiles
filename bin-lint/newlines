#!/usr/bin/env bash

set -euo pipefail # exit on any error, don't allow undefined variables, pipes don't swallow errors

file_ends_with_exactly_one_newline() {
  [[ $(tail -c2 "$1" | wc -l) -eq 1 && $(tail -c1 "$1" | wc -l) -eq 1 ]]
}

is_text_file() {
  local file="$1"

  if file "$file" | grep -q 'text' ; then
    return 0
  else
    return 1
  fi
}

text_files() {
  while read -r file ; do
    if is_text_file "$file" ; then
      echo "$file"
    fi
  done
}

git_diff_hash_before=$(git diff | sha1sum | choose 0)

# Ignore `shard.lock` files, since they end with two newlines.
readarray -t files_to_lint_newlines < <(
  changed-not-deleted-files | \
  text_files | \
  rg -v '(\bshard\.lock|.+\.yml\.enc|.+\.key|USAGE)$'
)

if [ ${#files_to_lint_newlines[@]} -eq 0 ] ; then
  write-background-notification 'No files need to be linted for newlines.'
else
  for file in "${files_to_lint_newlines[@]}" ; do
    if ! file_ends_with_exactly_one_newline "$file" ; then
      # Ensure at least one trailing newline.
      sed -i -e '$a'\\ "$file"
      # Collapse multiple trailing newlines into one.
      sed -i -e ':a;N;$!ba;s/\n\+$//' "$file"
    fi
  done

  git_diff_hash_after=$(git diff | sha1sum | choose 0)

  if [ "$git_diff_hash_before" == "$git_diff_hash_after" ] ; then
    write-background-notification 'Changed text files all end with exactly one newline.'
  else
    write-background-notification 'Some files did not end with exactly one newline. They were all corrected.'
    exit 1
  fi
fi
