#!/usr/bin/env ruby
# frozen_string_literal: true

# print [g]it [hist]ory of a file
#
# Examples:
#   [print most recent 3 commits (default)]
#   ghist app/controllers/application_controller.rb
#
#   [print most recent 10 commits]
#   ghist app/controllers/application_controller.rb 10

# load("#{Dir.home}/code/dotfiles/utils/ruby/debug.rb")
load("#{Dir.home}/code/dotfiles/utils/ruby/command_line_program.rb")

require 'active_support'
require 'active_support/core_ext/object'

class GitHistory < CommandLineProgram
  def call
    validate_arguments

    file_name_at_this_commit = file

    commits_to_show.each do |commit|
      puts
      system('hr')
      system({ 'DELTA_PAGER' => 'cat' }, "git show '#{commit}' -- '#{file_name_at_this_commit}'")
      system('hr')

      file_name_at_this_commit = renames[commit] || file_name_at_this_commit
    end
  end

  private

  def validate_arguments
    if (arguments_size = arguments.size) != 1
      $stderr.puts(<<~ERROR.squish)
        Only one argument is expected (a file path),
        but you provided #{arguments_size} (#{arguments}).
      ERROR

      exit(1)
    end
  end

  memo_wise \
  def file
    arguments[0]
  end

  memo_wise \
  def num_commits_to_show
    options[:commits]
  end

  memo_wise \
  def num_days_to_show
    options[:days]
  end

  memo_wise \
  def num_commits_to_request_from_git
    num_commits_to_show + commits_to_ignore.size
  end

  memo_wise \
  def commits_to_show
    commits_from_git =
      `#{<<~BASH.squish}`.split("\n")
        git log
          #{git_log_limiting_option}
          "#{most_recent_commit_with_file}"
          --format=%H
          --follow
          --
          "#{file}"
      BASH

    commits_without_ignored_commits = commits_from_git - commits_to_ignore

    if num_commits_to_show
      commits_without_ignored_commits.first(num_commits_to_show)
    else
      commits_without_ignored_commits
    end
  end

  memo_wise \
  def git_log_limiting_option
    if num_days_to_show
      "--since='#{num_days_to_show} days ago'"
    else
      "-n #{num_commits_to_request_from_git}"
    end
  end

  memo_wise \
  def most_recent_commit_with_file
    if system(%(test -e "#{file}"))
      'HEAD'
    else
      `git log --all -1 --format="%H" -- "#{file}"`.rstrip
    end
  end

  memo_wise \
  def renames
    `git log HEAD --format=%H --name-status --follow --diff-filter=R -- '#{file}'`.
      split(/\n(?=[0-9a-f]{40})/).
      to_h do |sha_and_name_info|
        sha_and_name_info.
          match(/(?<sha>[0-9a-f]{40})\n\nR\d+\s+(?<previous_name>\S+)?/).
          named_captures.
          values_at('sha', 'previous_name')
      end
  end

  memo_wise \
  def git_blame_ignore_revs_file
    `git config blame.ignoreRevsFile`.rstrip.presence
  end

  memo_wise \
  def commits_to_ignore
    if git_blame_ignore_revs_file.blank? || @options[:include_ignored]
      []
    else
      File.read(git_blame_ignore_revs_file).scan(/^[0-9a-f]{40}$/)
    end
  end
end

# Run the program if it is invoked directly. Otherwise, allow loading it as a library / for tests.
if $PROGRAM_NAME == __FILE__
  sloptions =
    Slop.parse do |o|
      o.bool('-i', '--include-ignored', 'show changes listed in git blame ignore revs file')
      o.integer('-c', '--commits', 'number of commits to show')
      o.integer('-d', '--days', 'number of days of history to show')
      o.on('-h', '--help', 'view this help info') do
        puts(o.to_s.dup.sub(%r{#{Dir.home}/code/dotfiles/bin/}, ''))
        exit
      end
    end

  GitHistory.new(sloptions:).call
end
