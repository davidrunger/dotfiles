#!/usr/bin/env zsh

# This is like [wh]ich, but (in certain cases) it also prints the content of the
# executable script or function, colorized with `bat`.

set -uo pipefail # don't allow undefined variables, pipes don't swallow errors

source $HOME/code/dotfiles/shell/aliases.zsh
source $HOME/code/dotfiles/shell/functions.zsh

which_output=$(which "$@")
which_exit_code=$?

if [ "$which_exit_code" -eq 0 ] ; then
  if [ -f $which_output ] ; then
    if [[ $which_output =~ "^$HOME/code/" ]] ; then
      echo "Executable $which_output :"
      hr
      bat $which_output --style=plain
    elif [[ $which_output =~ "^$HOME/bin/crystal-symlinks/" ]] ; then
      basename=$(basename "$which_output")
      crystal_source_file="$HOME/code/dotfiles/crystal-programs/$basename.cr"
      echo "Crystal binary compiled from $crystal_source_file :"
      hr
      bat $crystal_source_file --style=plain
    else
      ls $which_output
    fi
  elif [[ $which_output =~ 'aliased to (.*)' ]] ; then
    alias_content="$match[1]"
    echo "Alias $@ :"
    hr
    echo $alias_content | bat --language=zsh --file-name="Alias: $@" --style=plain
  elif [[ $which_output == *'('* ]] ; then
    echo "Function $@ :"
    hr
    echo $which_output | bat --language=zsh --file-name="Function: $@" --style=plain
  else
    blue "$which_output"
  fi
else
  red "Could not find executable '$@'."
  exit 1
fi
